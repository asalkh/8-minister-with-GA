import random

def fitness(individual):
    """ محاسبه تابع تناسب """
    conflicts = 0
    for i in range(len(individual)):
        for j in range(i + 1, len(individual)):
            if abs(individual[i] - individual[j]) == abs(i - j):
                conflicts += 1
    return len(individual) - conflicts

def generate_initial_population(size, n):
    """ تولید جمعیت اولیه """
    population = []
    for _ in range(size):
        individual = list(range(n))
        random.shuffle(individual)
        population.append(individual)
    return population

def selection(population, fitnesses):
    """ انتخاب والدین با استفاده از چرخش رولت """
    total_fitness = sum(fitnesses)
    pick = random.uniform(0, total_fitness)
    current = 0
    for i, fitness in enumerate(fitnesses):
        current += fitness
        if current > pick:
            return population[i]

def crossover(parent1, parent2):
    """ ترکیب یک‌نقطه‌ای """
    crossover_point = random.randint(0, len(parent1) - 1)
    child = parent1[:crossover_point] + parent2[crossover_point:]
    return child

def mutation(individual, mutation_rate):
    """ جهش """
    for i in range(len(individual)):
        if random.random() < mutation_rate:
            individual[i] = random.randint(0, len(individual) - 1)
    return individual

def genetic_algorithm(n, population_size=100, generations=100, mutation_rate=0.01):
    """ الگوریتم ژنتیک برای حل مسئله N وزیر """
    population = generate_initial_population(population_size, n)
    for generation in range(generations):
        fitnesses = [fitness(individual) for individual in population]
        new_population = []
        for _ in range(population_size):
            parent1 = selection(population, fitnesses)
            parent2 = selection(population, fitnesses)
            child = crossover(parent1, parent2)
            child = mutation(child, mutation_rate)
            new_population.append(child)
        population = new_population
        best_individual = max(population, key=fitness)
        if fitness(best_individual) == n:
            break
    return best_individual

# مثال برای 8 وزیر
solution = genetic_algorithm(8)
print(solution)                          
